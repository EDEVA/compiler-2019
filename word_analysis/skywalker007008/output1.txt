CONSTTK const
CHARTK char
IDENFR const_a
ASSIGN =
CHARCON a
SEMICN ;
CONSTTK const
CHARTK char
IDENFR _
ASSIGN =
CHARCON _
COMMA ,
IDENFR __
ASSIGN =
CHARCON p
SEMICN ;
CONSTTK const
CHARTK char
IDENFR const_plus
ASSIGN =
CHARCON +
SEMICN ;
CONSTTK const
CHARTK char
IDENFR const_mult
ASSIGN =
CHARCON *
SEMICN ;
CONSTTK const
INTTK int
IDENFR Integer_100
ASSIGN =
INTCON 100
SEMICN ;
CONSTTK const
INTTK int
IDENFR Integer_0
ASSIGN =
INTCON 0
COMMA ,
IDENFR max_loop
ASSIGN =
INTCON 10
SEMICN ;
CHARTK char
IDENFR a
COMMA ,
IDENFR global_a
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR array_int
SEMICN ;
INTTK int
IDENFR array_fib
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
IDENFR array_right
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_char
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
LPARENT (
IDENFR a
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR char_to_int
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR a
MINU -
CHARCON 0
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_int
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR char_to_int
LPARENT (
IDENFR a
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_plus
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR const_plus
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_sub
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON -
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR null_func
LPARENT (
RPARENT )
LBRACE {
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
RBRACE }
INTTK int
IDENFR fib
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
EQL ==
INTCON 1
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR n
EQL ==
INTCON 2
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
IDENFR fib
LPARENT (
IDENFR n
MINU -
INTCON 1
RPARENT )
PLUS +
IDENFR fib
LPARENT (
LPARENT (
IDENFR n
MINU -
INTCON 2
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR test_fib
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 10
MINU -
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
IDENFR array_fib
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR fib
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 10
MINU -
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
IFTK if
LPARENT (
IDENFR array_fib
LBRACK [
IDENFR i
RBRACK ]
NEQ !=
IDENFR array_right
LBRACK [
IDENFR i
PLUS +
LPARENT (
MINU -
INTCON 0
RPARENT )
RBRACK ]
MINU -
INTCON 0
RPARENT )
RETURNTK return
LPARENT (
MINU -
INTCON 1
RPARENT )
SEMICN ;
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR get_a
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
CHARCON a
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR init_fib
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
IDENFR array_right
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR array_right
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
DOTK do
IDENFR array_right
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR array_right
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
PLUS +
IDENFR array_right
LBRACK [
LPARENT (
IDENFR i
MINU -
INTCON 2
RPARENT )
RBRACK ]
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
RBRACE }
VOIDTK void
IDENFR test_scanf
LPARENT (
RPARENT )
LBRACE {
CHARTK char
IDENFR alpha_a
SEMICN ;
CHARTK char
IDENFR alpha_b
SEMICN ;
INTTK int
IDENFR int_100
SEMICN ;
INTTK int
IDENFR int_3
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR alpha_a
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR int_100
COMMA ,
IDENFR int_3
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR int_100
COMMA ,
IDENFR alpha_b
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR alpha_a
COMMA ,
IDENFR alpha_b
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
CHARTK char
IDENFR test_0
ASSIGN =
CHARCON 0
SEMICN ;
INTTK int
IDENFR result
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test_0 ascii digit:
RPARENT )
SEMICN ;
IDENFR print_char
LPARENT (
IDENFR test_0
RPARENT )
SEMICN ;
IDENFR print_int
LPARENT (
IDENFR test_0
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON Test Finished
RPARENT )
SEMICN ;
IDENFR print_plus
LPARENT (
RPARENT )
SEMICN ;
IDENFR print_sub
LPARENT (
RPARENT )
SEMICN ;
IDENFR init_fib
LPARENT (
RPARENT )
SEMICN ;
IDENFR result
ASSIGN =
IDENFR test_fib
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR result
EQL ==
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON fib ok
RPARENT )
SEMICN ;
ELSETK else
PRINTFTK printf
LPARENT (
STRCON fib error
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test_100
COMMA ,
IDENFR Integer_100
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test_p
COMMA ,
IDENFR __
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test_6
COMMA ,
PLUS +
PLUS +
INTCON 3
PLUS +
LPARENT (
MINU -
MINU -
INTCON 3
RPARENT )
RPARENT )
SEMICN ;
IDENFR test_scanf
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
