INTTK int
IDENFR max_num
COMMA ,
IDENFR min_num
SEMICN ;
INTTK int
IDENFR num_list
LBRACK [
INTCON 20
RBRACK ]
SEMICN ;
CHARTK char
IDENFR mode
SEMICN ;
INTTK int
IDENFR add
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR sub
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR a
PLUS +
LPARENT (
MINU -
IDENFR b
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR minus
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
MINU -
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR mult
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR c
SEMICN ;
IDENFR c
ASSIGN =
MINU -
IDENFR a
MULT *
LPARENT (
MINU -
IDENFR b
RPARENT )
SEMICN ;
RETURNTK return
LPARENT (
MINU -
LPARENT (
MINU -
LPARENT (
PLUS +
LPARENT (
MINU -
IDENFR c
RPARENT )
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR div
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR a
DIV /
IDENFR b
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_ops
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR int_1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR int_2
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR int_30
ASSIGN =
INTCON 30
SEMICN ;
IFTK if
LPARENT (
IDENFR int_1
PLUS +
IDENFR int_2
EQL ==
IDENFR add
LPARENT (
IDENFR int_1
COMMA ,
IDENFR int_2
RPARENT )
RPARENT )
PRINTFTK printf
LPARENT (
STRCON testAdd ok
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR int_1
MINU -
IDENFR int_2
EQL ==
IDENFR sub
LPARENT (
IDENFR int_1
COMMA ,
IDENFR int_2
RPARENT )
RPARENT )
PRINTFTK printf
LPARENT (
STRCON testSub ok
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR int_1
MULT *
IDENFR int_2
EQL ==
IDENFR mult
LPARENT (
IDENFR int_1
COMMA ,
IDENFR int_2
RPARENT )
RPARENT )
PRINTFTK printf
LPARENT (
STRCON testMult ok
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR int_1
DIV /
IDENFR int_2
EQL ==
IDENFR div
LPARENT (
IDENFR int_1
COMMA ,
IDENFR int_2
RPARENT )
RPARENT )
PRINTFTK printf
LPARENT (
STRCON testDiv ok
RPARENT )
SEMICN ;
IFTK if
LPARENT (
MINU -
IDENFR int_1
EQL ==
IDENFR minus
LPARENT (
IDENFR int_1
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON testMinus ok
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_factor
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR Int_10
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR Int_30
SEMICN ;
INTTK int
IDENFR Int_100
SEMICN ;
INTTK int
IDENFR test
SEMICN ;
IDENFR Int_30
ASSIGN =
INTCON 30
SEMICN ;
IDENFR Int_100
ASSIGN =
INTCON 100
SEMICN ;
IDENFR test
ASSIGN =
IDENFR Int_30
PLUS +
IDENFR Int_100
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test 130
COMMA ,
IDENFR test
RPARENT )
SEMICN ;
IDENFR test
ASSIGN =
IDENFR sub
LPARENT (
IDENFR Int_100
COMMA ,
IDENFR Int_30
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test 70
COMMA ,
IDENFR test
RPARENT )
SEMICN ;
IDENFR test
ASSIGN =
IDENFR mult
LPARENT (
IDENFR test
COMMA ,
IDENFR add
LPARENT (
IDENFR Int_100
COMMA ,
IDENFR Int_30
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test 9100
COMMA ,
IDENFR test
RPARENT )
SEMICN ;
IDENFR test
ASSIGN =
IDENFR Int_10
PLUS +
IDENFR div
LPARENT (
LPARENT (
IDENFR Int_30
PLUS +
IDENFR Int_10
RPARENT )
COMMA ,
IDENFR Int_10
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test 14
COMMA ,
IDENFR test
RPARENT )
SEMICN ;
IDENFR test
ASSIGN =
IDENFR sub
LPARENT (
IDENFR Int_100
COMMA ,
IDENFR Int_30
RPARENT )
PLUS +
IDENFR div
LPARENT (
IDENFR Int_30
COMMA ,
IDENFR Int_10
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test 73
COMMA ,
IDENFR test
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_state
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR Int_3
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR pos_a
SEMICN ;
INTTK int
IDENFR nev_a
SEMICN ;
IDENFR pos_a
ASSIGN =
INTCON 3
SEMICN ;
IDENFR nev_a
ASSIGN =
MINU -
LPARENT (
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test 3
COMMA ,
IDENFR pos_a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test 0
COMMA ,
PLUS +
IDENFR pos_a
PLUS +
IDENFR nev_a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test -6
COMMA ,
MINU -
IDENFR pos_a
PLUS +
IDENFR nev_a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test -6
COMMA ,
PLUS +
IDENFR sub
LPARENT (
MINU -
IDENFR pos_a
COMMA ,
MINU -
IDENFR nev_a
RPARENT )
MINU -
IDENFR add
LPARENT (
IDENFR pos_a
COMMA ,
IDENFR nev_a
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_item
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR Int_5
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR pos_5
SEMICN ;
INTTK int
IDENFR nev_5
SEMICN ;
INTTK int
IDENFR test
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR pos_5
ASSIGN =
PLUS +
INTCON 5
SEMICN ;
IDENFR nev_5
ASSIGN =
MINU -
INTCON 5
SEMICN ;
IDENFR test
ASSIGN =
IDENFR pos_5
MULT *
IDENFR nev_5
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test -25
COMMA ,
IDENFR test
RPARENT )
SEMICN ;
IDENFR test
ASSIGN =
IDENFR add
LPARENT (
IDENFR pos_5
COMMA ,
IDENFR nev_5
RPARENT )
MULT *
IDENFR nev_5
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test 0
COMMA ,
IDENFR test
RPARENT )
SEMICN ;
IDENFR test
ASSIGN =
IDENFR sub
LPARENT (
IDENFR pos_5
COMMA ,
IDENFR nev_5
RPARENT )
MULT *
IDENFR nev_5
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test 50
COMMA ,
IDENFR test
RPARENT )
SEMICN ;
IDENFR test
ASSIGN =
IDENFR nev_5
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test -5
COMMA ,
IDENFR test
RPARENT )
SEMICN ;
IDENFR test
ASSIGN =
IDENFR div
LPARENT (
IDENFR pos_5
COMMA ,
IDENFR Int_5
RPARENT )
MULT *
IDENFR nev_5
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test -5
COMMA ,
IDENFR test
RPARENT )
SEMICN ;
IDENFR test
ASSIGN =
LPARENT (
IDENFR mult
LPARENT (
IDENFR pos_5
COMMA ,
IDENFR nev_5
RPARENT )
DIV /
IDENFR div
LPARENT (
IDENFR pos_5
COMMA ,
IDENFR nev_5
RPARENT )
PLUS +
IDENFR Int_5
RPARENT )
MULT *
IDENFR add
LPARENT (
IDENFR pos_5
COMMA ,
MINU -
IDENFR nev_5
RPARENT )
DIV /
IDENFR Int_5
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test 60
COMMA ,
IDENFR test
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR test_state
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_item
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_factor
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
